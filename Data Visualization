{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyO5/KZHJ3pTyEe2I/Ub2cpe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/saisouravdas/file-/blob/main/Data%20Visualization\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "M9oUxiWCSTo7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = np.random.normal(0, 1, 1000)"
      ],
      "metadata": {
        "id": "a-3qHu_kU6rZ"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "y = [2, 4, 5, 7, 6, 8, 9, 10, 12, 13]\n",
        "plt.scatter(x, y)\n",
        "plt.xlabel('X Values')\n",
        "plt.ylabel('Y Values')\n",
        "plt.title('Scatter Plot of x vs. y')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "lrNbi9fr7v5I",
        "outputId": "4df003e6-ee2e-40ce-8396-e50055b5d5ea"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import altair as alt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = np.random.normal(0, 1, 1000)\n",
        "df = pd.DataFrame({'data': data})\n",
        "chart = alt.Chart(df).mark_bar().encode(\n",
        "    alt.X('data', bin=True),\n",
        "    y='count()',\n",
        "    tooltip=[alt.Tooltip('data', bin=True), 'count()']\n",
        ").properties(\n",
        "    title='Histogram of Data Distribution'\n",
        ").interactive()\n",
        "chart.save('data_histogram.json')"
      ],
      "metadata": {
        "id": "3KBdXhd88Ufa"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import altair as alt\n",
        "import pandas as pd\n",
        "df = pd.DataFrame({'sections': ['Section A', 'Section B', 'Section C', 'Section D'], 'sizes': [25, 30, 15, 30]})\n",
        "chart = alt.Chart(df).mark_arc(outerRadius=120).encode(\n",
        "    theta=alt.Theta(field=\"sizes\", type=\"quantitative\", stack=True),\n",
        "    color=alt.Color(field=\"sections\", type=\"nominal\"),\n",
        "    tooltip=['sections', 'sizes']\n",
        ").properties(\n",
        "    title='Pie Chart of Sections'\n",
        ").interactive()\n",
        "chart.save('sections_pie_chart.json')"
      ],
      "metadata": {
        "id": "G5p5fo8WPxBe"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import altair as alt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "np.random.seed(42)\n",
        "x = np.random.normal(0, 1, 100)\n",
        "y = 2 * x + np.random.normal(0, 1, 100)\n",
        "df = pd.DataFrame({'x': x, 'y': y})\n",
        "chart = alt.Chart(df).mark_circle().encode(\n",
        "    x='x',\n",
        "    y='y',\n",
        "    tooltip=['x', 'y']\n",
        ").properties(\n",
        "    title='Scatter Plot of x vs y'\n",
        ").interactive()\n",
        "chart.save('scatter_plot.json')"
      ],
      "metadata": {
        "id": "i73Gcp7ARsPd"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import altair as alt\n",
        "import pandas as pd\n",
        "df = pd.DataFrame({\n",
        "    'Category': ['A', 'B', 'C', 'D', 'E'],\n",
        "    'Value': [25, 40, 30, 35, 20]\n",
        "})\n",
        "chart = alt.Chart(df).mark_bar().encode(\n",
        "    x='Category',\n",
        "    y='Value',\n",
        "    tooltip=['Category', 'Value']\n",
        ").properties(\n",
        "    title='Comparison of Categories'\n",
        ").interactive()\n",
        "chart.save('categories_comparison.json')"
      ],
      "metadata": {
        "id": "SK6hYudTR6cK"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import altair as alt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "np.random.seed(42)\n",
        "categories = ['A', 'B', 'C', 'D', 'E']\n",
        "values = np.random.randint(0, 100, size=100)\n",
        "df = pd.DataFrame({'Category': np.random.choice(categories, size=100), 'Value': values})\n",
        "chart = alt.Chart(df).mark_boxplot().encode(\n",
        "    x='Category',\n",
        "    y='Value',\n",
        "    color='Category'\n",
        ").properties(\n",
        "    title='Distribution of Values across Categories'\n",
        ").interactive()\n",
        "chart.save('distribution_of_values.json')"
      ],
      "metadata": {
        "id": "MCtBeCIESjGr"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import altair as alt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "np.random.seed(42)\n",
        "num_samples = 100\n",
        "x1 = np.random.normal(0, 1, num_samples)\n",
        "x2 = 2 * x1 + np.random.normal(0, 1, num_samples)\n",
        "x3 = 0.5 * x1 + np.random.normal(0, 1, num_samples)\n",
        "df = pd.DataFrame({'x1': x1, 'x2': x2, 'x3': x3})\n",
        "corr_matrix = df.corr()\n",
        "corr_df = corr_matrix.reset_index().melt('index')\n",
        "chart = alt.Chart(corr_df).mark_rect().encode(\n",
        "    x='index',\n",
        "    y='variable',\n",
        "    color=alt.Color('value', scale=alt.Scale(range='heatmap')),\n",
        "    tooltip=['index', 'variable', 'value']\n",
        ").properties(\n",
        "    title='Correlation Matrix Heatmap'\n",
        ").interactive()\n",
        "chart.save('correlation_heatmap.json')"
      ],
      "metadata": {
        "id": "lnckViRNS26Q"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.seed(20)\n",
        "data = {\n",
        "    'Month': np.random.choice(['Jan', 'Feb', 'Mar', 'Apr', 'May'], 100),\n",
        "    'Day': np.random.choice(range(1, 31), 100),\n",
        "    'Sales': np.random.randint(1000, 5000, 100)\n",
        "}\n",
        "df = pd.DataFrame(data)"
      ],
      "metadata": {
        "id": "KzCWMPYfWB3N"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.linspace(-5, 5, 100)\n",
        "y = np.linspace(-5, 5, 100)\n",
        "x, y = np.meshgrid(x, y)\n",
        "z = np.sin(np.sqrt(x**2 + y**2))\n",
        "data = {\n",
        "    'X': x.flatten(),\n",
        "    'Y': y.flatten(),\n",
        "    'Z': z.flatten()\n",
        "}\n",
        "df = pd.DataFrame(data)"
      ],
      "metadata": {
        "id": "AH6wJH8YWPp3"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.seed(25)\n",
        "data = {\n",
        "    'Country': ['USA', 'Canada', 'UK',\n",
        "'Germany', 'France'],\n",
        "    'Population':\n",
        "np.random.randint(100, 1000, 5),\n",
        "    'GDP': np.random.randint(500, 2000,\n",
        "5)\n",
        "}\n",
        "df = pd.DataFrame(data)"
      ],
      "metadata": {
        "id": "BLDeRyyUWUUm"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from bokeh.plotting import figure, show\n",
        "from bokeh.io import output_notebook\n",
        "from bokeh.models import LinearColorMapper, ColumnDataSource\n",
        "df = pd.DataFrame({\n",
        "    'x': np.random.rand(100),\n",
        "    'y': np.random.rand(100),\n",
        "    'sizes': np.random.randint(5, 20, 100),\n",
        "    'colors': np.random.choice(['red', 'green', 'blue'], size=100)\n",
        "})\n",
        "p = figure(width=400, height=400)\n",
        "p.scatter(x='x', y='y', size='sizes', color='colors', source=df)\n",
        "show(p)"
      ],
      "metadata": {
        "id": "RUt-aNloW4xc"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fruits = ['Apples', 'Oranges', 'Bananas', 'Pears']\n",
        "counts = [20, 25, 30, 35]\n"
      ],
      "metadata": {
        "id": "zpLD5aKXXDOv"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from bokeh.plotting import figure, show\n",
        "from bokeh.io import output_notebook\n",
        "data_hist = np.random.randn(1000)\n",
        "hist, edges = np.histogram(data_hist, bins=30)\n",
        "p = figure(width=400, height=300, title=\"Histogram\")\n",
        "p.quad(top=hist, bottom=0, left=edges[:-1], right=edges[1:], fill_color=\"navy\", line_color=\"white\")\n",
        "show(p)"
      ],
      "metadata": {
        "id": "N4yxo0uUXW_1"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from bokeh.plotting import figure, show\n",
        "from bokeh.io import output_notebook\n",
        "from bokeh.models import ColumnDataSource\n",
        "\n",
        "data_heatmap = np.random.rand(10, 10)\n",
        "x = np.linspace(0, 1, 10)\n",
        "y = np.linspace(0, 1, 10)\n",
        "xx, yy = np.meshgrid(x, y)\n",
        "\n",
        "source = ColumnDataSource(data={\n",
        "    'x': xx.flatten(),\n",
        "    'y': yy.flatten(),\n",
        "    'z': data_heatmap.flatten()\n",
        "})\n",
        "\n",
        "p = figure(title=\"Heatmap\", tools=\"pan,wheel_zoom,reset\")\n",
        "\n",
        "p.rect(x='x', y='y', width=0.1, height=0.1, fill_color={'field': 'z', 'transform': p.linear_cmap(field_name='z', palette='Viridis')}, source=source)\n",
        "\n",
        "show(p)"
      ],
      "metadata": {
        "id": "S9xAm0n6YWI8"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}